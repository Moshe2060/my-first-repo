**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: allente.se
* @MinSWversion: 5.1
* @Revision 1  - [05/11/2024] Mat8861
* @Revision 0  - [26/12/2021] Mat8861
*   - creation
* @Remarks:      old viasat
* @header_end
**------------------------------------------------------------------------------------------------
site {url=allente.se|timezone=UTC|maxdays=7|cultureinfo=sv-SE|charset=UTF-8|keepindexpage}
scope.range{(urlindex)|end}
urldate.format {datestring|yyyy-MM-dd}
url_index.headers {customheader=Accept-Encoding=gzip,deflate,br}
url_index{url()|https://cs-vcb.allente.se/epg/events?date=|urldate|&category-filter=}
global_temp_1.modify {set|'config_site_id'}
end_scope
index_urlchannellogo {url||{"id":"'global_temp_1'","icon":"||","name":"|","name":"}
index_showsplit.scrub {multi|{"id":"'global_temp_1'",|"events":[|}]}|}]}}
index_showsplit.modify {replace|\},\{|\}\|\{}
index_showsplit.modify{cleanup(style=jsondecode)}
index_start.scrub {single|"time":"||Z|Z}
index_title.scrub {single|"title":"||",|",} 
index_subtitle.scrub {single|"details":{|"title":"|",|",}
index_subtitle.modify {clear('index_title')}
index_category.scrub{single(separator="","" max=2)|"categories":["||"],}
index_category.modify{cleanup(style=name)}
index_description.scrub {single|"description":"||",|",} 
index_episode.scrub {regex(pattern="S'S1' E'E1'""S'S1'""E'E1'")||"season":([1-9]*),"||}
index_temp_1.scrub{regex||"episode":([1-9]*),"||}
index_episode.modify{addend('index_temp_1' not "")|E'index_temp_1'}
index_episode.modify{addstart(not "")|S}
index_showicon.scrub {regex||"image":"([^"]*)",||}
**
**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
** @auto_xml_channel_start
*urldate.format {datestring|yyyy-MM-dd}
*url_index{url|https://cs-vcb.allente.se/epg/events?date=|urldate|&category-filter=}
*url_index.headers {customheader=Accept-Encoding=zip, deflate, br, zstd}
*url_index.headers {accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7}
*index_site_channel.modify {replace|'|â€™}
*index_site_channel.scrub {regex||{"id":"\d+","icon":"[^"]*","name":"([^"]*)","events":||}
*index_site_id.scrub {regex||{"id":"(\d+)","icon":"[^"]*","name":"[^"]*","events":||}
*scope.range {(channellist)|end}
*index_site_id.modify {cleanup(removeduplicates=equal,100 link="index_site_channel")}
*end_scope
** @auto_xml_channel_end
