**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: zap.co.ao
* @MinSWversion: V5.0
* @Revision 1 - [09/10/2024] Blackbear199
*   - url change
* @Revision 0 - [01/08/2018] Mat8861
*   - creation
* @Remarks:
* @header_end
**------------------------------------------------------------------------------------------------
site {url=zap.co.ao|timezone=UTC|maxdays=7|cultureinfo=en-GB|charset=UTF-8|titlematchfactor=90|nopageoverlaps|keepindexpage}
site {ratingsystem=Imdb|episodesystem=onscreen}
*
scope.range {(urlindex)|end}
url_index {url|http://137.74.115.87/_api/channels/|urldate|/epg.json}
url_index.headers {customheader=Accept-Encoding=gzip,deflate,br}
url_index.headers {customheader=X-Requested-With=XMLHttpRequest}
end_scope
*
urldate.format {datestring|yyyy-MM-dd}
*
scope.range {(datelogo)|end}
index_variable_element.modify{set|'config_site_id'}
index_urlchannellogo.scrub {regex||^.*?"image_uri":"([^"]*)","id":\d*,"identifier":"'index_variable_element'",||}
index_urlchannellogo.modify {cleanup(style=jsondecode)}
end_scope
*
scope.range {(splitindex)|end}
index_showsplit.scrub {multi|"identifier":"'index_variable_element'"|{|}|]}
index_showsplit.modify{cleanup(style=unidecode)}
index_showsplit.modify {cleanup(style=jsondecode)}
index_showsplit.modify {replace|\\n|####}
*index_showsplit.modify {(debug)}
end_scope
*
scope.range {(indexshowdetails)|end}
index_date.scrub {single(force)|"date":"||T|T",}
index_start.scrub {single(pattern="HH\hmm")|"start_time":"||"|"}
index_stop.scrub{single(pattern="HH\hmm")|"end_time":"||"|"}
index_title.scrub {single|"name":"||"|"}
index_subtitle.scrub {single|"subtitle":"||"|"}
index_description.scrub {single(separator="####" include=last)|"sinopse":"||","|","}
index_temp_2.scrub {single(separator="####" exclude=last exclude="IMDB")|"sinopse":"||","|","}
*
index_temp_1.modify{substring(type=regex)|'index_title' "(\s[Tt].\d+)"}
index_episode.modify{substring(type=regex pattern="T.'S1'Ep.'E1'""Ep.'E1'")|'index_title' "(\s[Ee]p.\d+)"}
index_episode.modify{addstart(not "")|'index_temp_1'}
index_title.modify{remove|'index_episode'}
index_temp_2.modify {clear('index_description')}
index_productiondate.modify{substring(type=regex)|'index_temp_2' "Ano:\s(\d{4})\s"}
index_title.modify{remove('index_productiondate' not "")| ('index_productiondate')}
index_temp_2.modify {remove('index_productiondate' not "")|Ano: 'index_productiondate' }
index_director.modify{substring(type=regex)|'index_temp_2' "De:\s(.*?)\sCom:"}
index_temp_2.modify {remove('index_director' not "")|De: 'index_director' }
index_actor.modify {substring(type=regex)|'index_temp_2' "Com:\s([^,]*)(?:,\s([^,]*))*"}
index_temp_2.modify {remove('index_actor' not "" separator=", ")|Com: 'index_actor'}
index_rating.modify {substring(type=regex)|'index_temp_2' "IMDB®\s(\d+,\d+)\/10"}
index_temp_2.modify {remove('index_rating' not "" type=regex)|"IMDB® 'index_rating'\/10,?\s*"}
index_rating.modify {replace|,|.}
loop {('index_episode' not "" max=1)|end}
index_subtitle.modify {set('index_temp_2' not "")|'index_temp_2'}
index_subtitle.modify {substring("" type=sentence)|'index_description' 0 1}
index_temp_3.modify {calculate(format=F0 type=word)|'index_subtitle' #}
index_subtitle.modify {clear('index_temp_3' > "5")}
index_description.modify {remove('index_subtitle' not "" type=regex)|"'index_subtitle'\.?\s*"}
index_subtitle.modify {cleanup(tags="\.=/")}
end_loop
end_scope
**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
**
** @auto_xml_channel_start
*scope.range {(channellist)|end}
*index_site_id.scrub {regex||{"image_uri":".*?"identifier":"([^"]*)","name":".*?"epg":||}
*index_site_channel.scrub {regex||{"image_uri":".*?","name":"([^"]*)",".*?"epg":||}
*index_site_channel.modify{cleanup(style=unidecode)}
*index_site_id.modify {cleanup(removeduplicates link="index_site_channel")}
*end_scope
** @auto_xml_channel_end
